{"version":3,"sources":["images/desk1.jpg","images/desk2.jpg","components/homeWrapper.jsx","components/workWrapper.jsx","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","HomeWrapper","props","clickPage","page","changeCurrentPage","setState","show","timmer","setTimeout","clearTimeout","renderHomePage","className","style","backgroundImage","HomePageImg","onClick","state","this","transitionName","transitionEnterTimeout","transitionLeaveTimeout","React","Component","WorkWrapper","clickBack","timer","currPage","nextProps","WorkImage","App","renderContent","pages","home","work","about","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.62ee2b93.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/desk1.740ab83d.jpg\";","module.exports = __webpack_public_path__ + \"static/media/desk2.efda70fe.jpg\";","import React from 'react';\nimport ReactCSSTransitionGroup from 'react-addons-css-transition-group';\nimport HomePageImg from  '../images/desk1.jpg';\n\nclass HomeWrapper extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      show: false,\n    };\n    this.timmer = null;\n  }\n  \n  componentDidMount() {\n    this.setState({\n      show: true,\n    });\n  }\n\n  clickPage = (page) => {\n    const { changeCurrentPage } = this.props;\n    this.setState({ show: false });\n    this.timmer = setTimeout(() => {\n      changeCurrentPage(page);\n      clearTimeout(this.timmer);\n      this.timmer = null;\n    }, 100);\n  }\n\n  renderHomePage = () => (\n    <div className=\"home-content\">\n      <div className=\"wrapper-item image-wrapper\" style={{ backgroundImage: `url(${HomePageImg})` }} />\n      <div className=\"wrapper-item content-wrapper\">\n        <button onClick={() => { this.clickPage('work')}}>work</button>\n        <button onClick={() => { this.clickPage('about')}}>about</button>\n      </div>\n    </div>\n  );\n\n  render() {\n    const { show } = this.state;\n    return <>\n      <ReactCSSTransitionGroup\n        transitionName=\"home\"\n        transitionEnterTimeout={250}\n        transitionLeaveTimeout={200}\n        className=\"container-wrapper\"\n      >\n        {show ? this.renderHomePage() : null}\n        </ReactCSSTransitionGroup>\n      </>;\n  }\n}\n\nexport default HomeWrapper;\n","import React from 'react';\nimport ReactCSSTransitionGroup from 'react-addons-css-transition-group';\nimport WorkImage from  '../images/desk2.jpg';\n\nclass WorkWrapper extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      show: false,\n      currPage: props.currPage\n    };\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this.setState({\n      currPage: nextProps.currPage\n    });\n  }\n  \n  componentDidMount() {\n    this.setState({\n      show: true,\n    });\n    this.timer = null;\n  }\n\n  clickBack = () => {\n    const { changeCurrentPage } = this.props;\n    this.setState({ show: false });\n    this.timer = setTimeout(() => {\n      changeCurrentPage('home');\n      clearTimeout(this.timmer);\n      this.timmer = null;\n    }, 100);\n  }\n  \n  render() {\n    const { show } = this.state;\n    const { currPage } = this.props;\n    return <div className=\"container-wrapper\">\n        <ReactCSSTransitionGroup\n          transitionName=\"workimg\"\n          transitionEnterTimeout={250}\n          transitionLeaveTimeout={200}\n          className=\"wrapper-item\"\n        >\n          {show ? <div className=\"image-wrapper\" style={{ backgroundImage: `url(${WorkImage})` }} /> : null}\n        </ReactCSSTransitionGroup>\n        <ReactCSSTransitionGroup\n          transitionName=\"workcontent\"\n          transitionEnterTimeout={250}\n          transitionLeaveTimeout={200}\n          className=\"wrapper-item\"\n        >\n          {show ? <div className=\"content-wrapper\">\n            <button onClick={this.clickBack}>home</button>\n            <div>{currPage}</div>\n          </div> : null}\n        </ReactCSSTransitionGroup>\n      </div>;\n  }\n}\n\nexport default WorkWrapper;\n","import React from 'react';\nimport HomeWrapper from  './components/homeWrapper.jsx';\nimport WorkWrapper from './components/workWrapper.jsx';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.pages = {\n      home: 'home',\n      work: 'work',\n      about: 'about'\n    }\n    this.state = {\n      currPage: null\n    };\n  }\n  \n  componentDidMount() {\n    this.setState({\n      currPage: this.pages.home\n    });\n  }\n\n  changeCurrentPage = currPage => this.setState({ currPage });\n\n  renderContent = () => {\n    const { currPage } = this.state;\n    const props = {\n      changeCurrentPage: this.changeCurrentPage,\n      currPage\n    }\n    if (currPage === this.pages.home) {\n      return <HomeWrapper {...props}/>;\n    }\n    return <WorkWrapper {...props} />;\n  }\n\n  render() {\n    return <div className=\"App\">{this.renderContent()}</div>;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './styles/animate.css';\nimport './styles/my-animate.css';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}